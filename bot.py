import json
import os
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# ==== –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ====
with open("config.json", "r", encoding="utf-8") as f:
    cfg = json.load(f)

TOKEN = cfg["BOT_TOKEN"]
COMMANDS_FILE = "commands.json"
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ==== –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–º–∞–Ω–¥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ====
if not os.path.exists(COMMANDS_FILE):
    with open(COMMANDS_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f, indent=2)

def update_command(username, command):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∏–≥—Ä–æ–∫–∞"""
    with open(COMMANDS_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    data[username] = command
    with open(COMMANDS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

# ==== –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ====
@dp.message(F.text.startswith("/start"))
async def start(msg: types.Message):
    await msg.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/user <RobloxName>` –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–º.", parse_mode="Markdown")

# ==== –ö–æ–º–∞–Ω–¥–∞ /user –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–º ====
@dp.message(F.text.startswith("/user"))
async def user_control(msg: types.Message):
    args = msg.text.split()
    if len(args) != 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/user <RobloxName>`", parse_mode="Markdown")
        return

    username = args[1]

    # –ö–Ω–æ–ø–∫–∏ —Ç—Ä–æ–ª–ª–∏–Ω–≥–∞
    buttons = [
        [InlineKeyboardButton(text="üü¢ Jump", callback_data=f"jump:{username}")],
        [InlineKeyboardButton(text="üíÄ Kill", callback_data=f"kill:{username}")],
        [InlineKeyboardButton(text="‚ö° Glitch Screen", callback_data=f"glitch:{username}")],
        [InlineKeyboardButton(text="üîí Lock Screen", callback_data=f"lock:{username}")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await msg.answer(f"üéÆ –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è **{username}**:", reply_markup=keyboard, parse_mode="Markdown")

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ ====
@dp.callback_query()
async def callbacks(callback: types.CallbackQuery):
    command, username = callback.data.split(":")
    update_command(username, command)
    await callback.answer(f"–ö–æ–º–∞–Ω–¥–∞ '{command}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {username}!")

# ==== –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ====
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())