import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# === –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
with open("config.json", "r", encoding="utf-8") as f:
    cfg = json.load(f)

TOKEN = cfg["BOT_TOKEN"]
COMMANDS_FILE = "commands.json"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(COMMANDS_FILE):
    with open(COMMANDS_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f, indent=2)

def update_command(username, command):
    with open(COMMANDS_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    data[username] = command
    with open(COMMANDS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    await msg.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /user <RobloxName> –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–º.")

@dp.message_handler(commands=['user'])
async def user_control(msg: types.Message):
    args = msg.get_args().split()
    if len(args) != 1:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user <RobloxName>")
        return

    username = args[0]

    buttons = [
        [types.InlineKeyboardButton("üü¢ Jump", callback_data=f"jump:{username}")],
        [types.InlineKeyboardButton("üíÄ Kill", callback_data=f"kill:{username}")],
        [types.InlineKeyboardButton("‚ö° Glitch Screen", callback_data=f"glitch:{username}")],
        [types.InlineKeyboardButton("üîí Lock Screen", callback_data=f"lock:{username}")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await msg.answer(f"üéÆ –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è **{username}**:", reply_markup=keyboard, parse_mode="Markdown")

@dp.callback_query_handler()
async def callbacks(callback: types.CallbackQuery):
    command, username = callback.data.split(":")
    update_command(username, command)
    await callback.answer(f"–ö–æ–º–∞–Ω–¥–∞ '{command}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {username}!")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)